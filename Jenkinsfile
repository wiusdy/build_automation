pipeline {
  agent { label 'build_automation_node' }

  environment {
    // Pode adicionar vari√°veis de ambiente aqui, se necess√°rio
    APP_ENV = 'development'
  }

  options {
    // Mant√©m os √∫ltimos 5 builds apenas
    buildDiscarder(logRotator(numToKeepStr: '5'))
    // Exibe timestamps no log
    timestamps()
  }

  triggers {
    // Usado apenas para debugging (scan peri√≥dico), mas GitHub Webhook √© prefer√≠vel
    pollSCM('* * * * *') // Opcional: verifica por mudan√ßas a cada minuto
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        echo "Branch atual: ${env.BRANCH_NAME}"
      }
    }

    stage('Build') {
      steps {
        echo 'üõ†Ô∏è Rodando processo de build...'
        // Exemplo: build Node, Java, Docker etc.
        sh 'echo "Simulando build..."'
      }
    }

    stage('Test') {
      steps {
        echo 'üß™ Executando testes...'
        sh 'echo "Rodando testes fict√≠cios"'
      }
    }

    stage('PR Check') {
      when {
        expression {
          // S√≥ executa se a branch tiver um PR associado (GitHub multibranch trata isso)
          return env.CHANGE_ID != null
        }
      }
      steps {
        echo "‚úÖ Essa build √© de um Pull Request: ${env.CHANGE_ID}"
      }
    }
  }

  post {
    success {
      echo '‚úÖ Build finalizado com sucesso!'
    }
    failure {
